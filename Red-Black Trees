/////////////////////////////////////////   Red-Black Trees    //////////////////////////////

template <typename T>
class RedBlackTree {
    enum Color { RED, BLACK , DOUBLE_BLACK};

    struct TreeNode {
        T data;
        TreeNode *left, *right, *parent;
        Color color;
        TreeNode(T data): data(data), left(nullptr), right(nullptr), parent(nullptr), color(RED) {}
    };

    TreeNode *root;

    void rotateLeft(TreeNode *&ptr) {
        TreeNode *right_child = ptr->right;
        ptr->right = right_child->left;
        if (ptr->right != nullptr) ptr->right->parent = ptr;
        right_child->parent = ptr->parent;
        if (ptr->parent == nullptr) root = right_child;
        else if (ptr == ptr->parent->left) ptr->parent->left = right_child;
        else ptr->parent->right = right_child;
        right_child->left = ptr;
        ptr->parent = right_child;
    }

    void rotateRight(TreeNode *&ptr) {
        TreeNode *left_child = ptr->left;
        ptr->left = left_child->right;
        if (ptr->left != nullptr) ptr->left->parent = ptr;
        left_child->parent = ptr->parent;
        if (ptr->parent == nullptr) root = left_child;
        else if (ptr == ptr->parent->left) ptr->parent->left = left_child;
        else ptr->parent->right = left_child;
        left_child->right = ptr;
        ptr->parent = left_child;
    }

    void fixInsertRBTree(TreeNode *&ptr) {
        TreeNode *parent = nullptr;
        TreeNode *grandparent = nullptr;
        while (ptr != root && getColor(ptr) == RED && getColor(ptr->parent) == RED) {
            parent = ptr->parent;
            grandparent = parent->parent;
            if (parent == grandparent->left) {
                TreeNode *uncle = grandparent->right;
                if (getColor(uncle) == RED) {
                    setColor(uncle, BLACK);
                    setColor(parent, BLACK);
                    setColor(grandparent, RED);
                    ptr = grandparent;
                } else {
                    if (ptr == parent->right) {
                        rotateLeft(parent);
                        ptr = parent;
                        parent = ptr->parent;
                    }
                    rotateRight(grandparent);
                    swap(parent->color, grandparent->color);
                    ptr = parent;
                }
            } else {
                TreeNode *uncle = grandparent->left;
                if (getColor(uncle) == RED) {
                    setColor(uncle, BLACK);
                    setColor(parent, BLACK);
                    setColor(grandparent, RED);
                    ptr = grandparent;
                } else {
                    if (ptr == parent->left) {
                        rotateRight(parent);
                        ptr = parent;
                        parent = ptr->parent;
                    }
                    rotateLeft(grandparent);
                    swap(parent->color, grandparent->color);
                    ptr = parent;
                }
            }
        }
        setColor(root, BLACK);
    }

    void fixDeleteRBTree(TreeNode *&node) {
        if (node == nullptr)
            return;

        if (node == root) {
            root = nullptr;
            return;
        }

        if (getColor(node) == RED || getColor(node->left) == RED || getColor(node->right) == RED) {
            TreeNode *child = node->left != nullptr ? node->left : node->right;

            if (node == node->parent->left) {
                node->parent->left = child;
                if (child != nullptr)
                    child->parent = node->parent;
                setColor(child, BLACK);
                delete (node);
            } else {
                node->parent->right = child;
                if (child != nullptr)
                    child->parent = node->parent;
                setColor(child, BLACK);
                delete (node);
            }
        } else {
            TreeNode *sibling = nullptr;
            TreeNode *parent = nullptr;
            TreeNode *ptr = node;
            setColor(ptr, DOUBLE_BLACK);
            while (ptr != root && getColor(ptr) == DOUBLE_BLACK) {
                parent = ptr->parent;
                if (ptr == parent->left) {
                    sibling = parent->right;
                    if (getColor(sibling) == RED) {
                        setColor(sibling, BLACK);
                        setColor(parent, RED);
                        rotateLeft(parent);
                    } else {
                        if (getColor(sibling->left) == BLACK && getColor(sibling->right) == BLACK) {
                            setColor(sibling, RED);
                            if (getColor(parent) == RED)
                                setColor(parent, BLACK);
                            else
                                setColor(parent, DOUBLE_BLACK);
                            ptr = parent;
                        } else {
                            if (getColor(sibling->right) == BLACK) {
                                setColor(sibling->left, BLACK);
                                setColor(sibling, RED);
                                rotateRight(sibling);
                                sibling = parent->right;
                            }
                            setColor(sibling, parent->color);
                            setColor(parent, BLACK);
                            setColor(sibling->right, BLACK);
                            rotateLeft(parent);
                            break;
                        }
                    }
                } else {
                    sibling = parent->left;
                    if (getColor(sibling) == RED) {
                        setColor(sibling, BLACK);
                        setColor(parent, RED);
                        rotateRight(parent);
                    } else {
                        if (getColor(sibling->left) == BLACK && getColor(sibling->right) == BLACK) {
                            setColor(sibling, RED);
                            if (getColor(parent) == RED)
                                setColor(parent, BLACK);
                            else
                                setColor(parent, DOUBLE_BLACK);
                            ptr = parent;
                        } else {
                            if (getColor(sibling->left) == BLACK) {
                                setColor(sibling->right, BLACK);
                                setColor(sibling, RED);
                                rotateLeft(sibling);
                                sibling = parent->left;
                            }
                            setColor(sibling, parent->color);
                            setColor(parent, BLACK);
                            setColor(sibling->left, BLACK);
                            rotateRight(parent);
                            break;
                        }
                    }
                }
            }
            if (node == node->parent->left)
                node->parent->left = nullptr;
            else
                node->parent->right = nullptr;
            delete (ptr);
            setColor(root, BLACK);
        }
    }

    TreeNode* insertBST(TreeNode *&root, TreeNode *&ptr) {
        if (root == nullptr)
            return ptr;
        if (ptr->data < root->data) {
            root->left = insertBST(root->left, ptr);
            root->left->parent = root;
        } else if (ptr->data > root->data) {
            root->right = insertBST(root->right, ptr);
            root->right->parent = root;
        }
        return root;
    }

    TreeNode* deleteBST(TreeNode *&root, T data) {
        if (root == nullptr)
            return root;
        if (data < root->data)
            return deleteBST(root->left, data);
        if (data > root->data)
            return deleteBST(root->right, data);
        if (root->left == nullptr || root->right == nullptr)
            return root;
        TreeNode *temp = minValueTreeNode(root->right);
        root->data = temp->data;
        return deleteBST(root->right, temp->data);
    }

    int getColor(TreeNode *&node) {
        if (node == nullptr)
            return BLACK;
        return node->color;
    }

    void setColor(TreeNode *&node, Color color) {
        if (node == nullptr)
            return;
        node->color = color;
    }

    TreeNode* minValueTreeNode(TreeNode *&node) {
        TreeNode *ptr = node;
        while (ptr->left != nullptr)
            ptr = ptr->left;
        return ptr;
    }

    TreeNode* maxValueTreeNode(TreeNode *&node) {
        TreeNode *ptr = node;
        while (ptr->right != nullptr)
            ptr = ptr->right;
        return ptr;
    }

    TreeNode* getSuccessor(TreeNode *&node) {
        if (node->right != nullptr)
            return minValueTreeNode(node->right);
        TreeNode *successor = nullptr;
        TreeNode *ancestor = root;
        while (ancestor != node) {
            if (node->data < ancestor->data) {
                successor = ancestor;
                ancestor = ancestor->left;
            } else
                ancestor = ancestor->right;
        }
        return successor;
    }

    bool deleteValue(const T &data) {
        TreeNode *node = deleteBST(root, data);
        fixDeleteRBTree(node);
    }

public:
    RedBlackTree() : root(nullptr) {}

    void insert(const T &data) {
        TreeNode *node = new TreeNode(data);
        root = insertBST(root, node);
        fixInsertRBTree(node);
    }

    TreeNode* search(const T &data) {
        TreeNode *temp = root;
        while (temp != nullptr) {
            if (data < temp->data) {
                temp = temp->left;
            } else if (data > temp->data) {
                temp = temp->right;
            } else {
                return temp;
            }
        }
        return nullptr;
    }

    void levelOrderTraversal() {
        cout << endl << "The Level Order traversal starts:" << endl;
        if(root == NULL) { cout << "Nothing"; return; }

        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()) {
            int siz = q.size();

            while(siz--) {
                TreeNode* curr = q.front(); q.pop();

                cout << curr->data << " ";
                if(curr->left) q.push(curr->left);
                if(curr->right) q.push(curr->right);
            }

            cout << endl;
        }

        cout << "ends" << endl;
    }
};

/////////////////////////////////////////   main function     //////////////////////////////

int main() {
    RedBlackTree<int> tree;

    tree.insert(10);
    tree.insert(20);
    tree.insert(30);
    tree.insert(40);
    tree.insert(50);
    tree.insert(25);

    tree.levelOrderTraversal();

    return 0;
}
